// Code generated by mockery v1.0.0. DO NOT EDIT.

package mockbuild

import discovery "k8s.io/client-go/discovery"
import mock "github.com/stretchr/testify/mock"
import v1alpha1 "github.com/knative/build/pkg/client/clientset/versioned/typed/build/v1alpha1"

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *Interface) Build() v1alpha1.BuildV1alpha1Interface {
	ret := _m.Called()

	var r0 v1alpha1.BuildV1alpha1Interface
	if rf, ok := ret.Get(0).(func() v1alpha1.BuildV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.BuildV1alpha1Interface)
		}
	}

	return r0
}

// BuildV1alpha1 provides a mock function with given fields:
func (_m *Interface) BuildV1alpha1() v1alpha1.BuildV1alpha1Interface {
	ret := _m.Called()

	var r0 v1alpha1.BuildV1alpha1Interface
	if rf, ok := ret.Get(0).(func() v1alpha1.BuildV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.BuildV1alpha1Interface)
		}
	}

	return r0
}

// Discovery provides a mock function with given fields:
func (_m *Interface) Discovery() discovery.DiscoveryInterface {
	ret := _m.Called()

	var r0 discovery.DiscoveryInterface
	if rf, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}

	return r0
}
