// Code generated by mockery v1.0.0. DO NOT EDIT.

package mockbuild

import mock "github.com/stretchr/testify/mock"
import rest "k8s.io/client-go/rest"
import v1alpha1 "github.com/knative/build/pkg/client/clientset/versioned/typed/build/v1alpha1"

// BuildV1alpha1Interface is an autogenerated mock type for the BuildV1alpha1Interface type
type BuildV1alpha1Interface struct {
	mock.Mock
}

// BuildTemplates provides a mock function with given fields: namespace
func (_m *BuildV1alpha1Interface) BuildTemplates(namespace string) v1alpha1.BuildTemplateInterface {
	ret := _m.Called(namespace)

	var r0 v1alpha1.BuildTemplateInterface
	if rf, ok := ret.Get(0).(func(string) v1alpha1.BuildTemplateInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.BuildTemplateInterface)
		}
	}

	return r0
}

// Builds provides a mock function with given fields: namespace
func (_m *BuildV1alpha1Interface) Builds(namespace string) v1alpha1.BuildInterface {
	ret := _m.Called(namespace)

	var r0 v1alpha1.BuildInterface
	if rf, ok := ret.Get(0).(func(string) v1alpha1.BuildInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.BuildInterface)
		}
	}

	return r0
}

// ClusterBuildTemplates provides a mock function with given fields:
func (_m *BuildV1alpha1Interface) ClusterBuildTemplates() v1alpha1.ClusterBuildTemplateInterface {
	ret := _m.Called()

	var r0 v1alpha1.ClusterBuildTemplateInterface
	if rf, ok := ret.Get(0).(func() v1alpha1.ClusterBuildTemplateInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ClusterBuildTemplateInterface)
		}
	}

	return r0
}

// RESTClient provides a mock function with given fields:
func (_m *BuildV1alpha1Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}
