#!/bin/bash

function print_usage() {
cat <<EOF

faas is a tool for building and creating functions

Commands:
  build        Build a function container
  create       Create function resource definitions
  apply        Apply function resource definitions
  delete       Delete function resource definitions
  list         List current function resources
  logs         Show logs for a function resource

  Use "faas <command> --help" for more information about a given command.

EOF
}

function print_build_usage() {
cat <<EOF

Build the function based on the code available in the path directory, using the name 
  and version specified for the image that is built.
  
Usage: 

  faas build -n <name> -v <version> -f <path>

Options:

  -n, --name: the name of the function (defaults to the name of the current directory)
  -v, --version: the version of the function (defaults to v0001)
  -f, --filename: filename, directory, or URL for the code or resource (defaults to the current directory)

EOF
}

function print_create_usage() {
cat <<EOF

Create the resource[s] based on the resource definition[s] that the path points to.

Usage: 

  faas create -f <path>

Options:

  -f, --filename: filename, directory, or URL for the resource definition[s] (defaults to the current directory)

EOF
}

function print_apply_usage() {
cat <<EOF

Apply the resource definition[s] that the path points to. A resource will be created if
  it doesn't exist yet.

Usage: 

  faas apply -f <path>

Options:

  -f, --filename: filename, directory, or URL for the resource definition[s] (defaults to the current directory)

EOF
}

function print_delete_usage() {
cat <<EOF

Delete the resource definition[s] for the function specified.

Usage: 

  faas delete -n <name>

Options:

  -n, --name: the name of the function (defaults to the name of the current directory)

EOF
}

function print_list_usage() {
cat <<EOF

List the current function resources.

Usage: 

  faas list

EOF
}

function print_logs_usage() {
cat <<EOF

Display the logs for a running function.
  
Usage: 

  faas logs -n <name> [-c <container>] [-t]

Options:

  -n, --name: the name of the function (defaults to the name of the current directory)
  -c, --container: the name of the container, usually sidecar or main (defaults to sidecar)
  -t, --tail: tail the logs

EOF
}

function build() {
  echo "Building $FUNCTION $FNPATH $VERSION"
  docker build -t "sk8s/${FUNCTION}:${VERSION}" $FNPATH
}

function create() {
  echo "Creating $FNPATH resource[s]"
  kubectl create -f $FNPATH
}

function apply() {
  echo "Applying $FNPATH resource[s]"
  kubectl apply -f $FNPATH
}

function delete() {
  echo "Deleting $FUNCTION resource[s]"
  kubectl delete function $FUNCTION
}

function list() {
  echo "Listing function resources"
  kubectl get functions
}

function logs() {
  echo "Displaying logs for container ${CONTAINER} of function ${FUNCTION}"
  kubectl logs ${TAIL} -c ${CONTAINER} $(kubectl get pod -l function=${FUNCTION} -o jsonpath='{.items[0].metadata.name}')
}

# ======================================= FUNCTIONS END =======================================

if [[ $1 == "--help" || $1 == "-h" ]] ; then
    print_usage
    exit 0
fi

if [[ $# == 0 ]]; then
  print_usage
  exit 0
fi

COMMAND="$1"
shift

if [[ $1 == "--help" || $1 == "-h" ]] ; then
  if [[ "${COMMAND}" == "build" ]]; then
    print_build_usage
    exit 0
  elif [[ "${COMMAND}" == "create" ]]; then
    print_create_usage
    exit 0
  elif [[ "${COMMAND}" == "apply" ]]; then
    print_apply_usage
    exit 0
  elif [[ "${COMMAND}" == "delete" ]]; then
    print_delete_usage
    exit 0
  elif [[ "${COMMAND}" == "list" ]]; then
    print_list_usage
    exit 0
  elif [[ "${COMMAND}" == "logs" ]]; then
    print_logs_usage
    exit 0
  fi    
fi

while [[ $# > 0 ]]
do
key="$1"
case ${key} in
  -n|--name)
  FUNCTION="$2"
  shift
  ;;
  -f|--filename)
  FNPATH="$2"
  shift
  ;;
  -v|--version)
  VERSION="$2"
  shift
  ;;
  -c|--container)
  CONTAINER="$2"
  shift
  ;;
  -t|--tail)
  TAIL="-f"
  ;;
  --help)
  print_usage
  exit 0
  ;;
  *)
  echo ""
  echo "ERROR: Invalid option: [$1]"
  print_usage
  exit 1
  ;;
esac
shift
done

# ======================================= DEFAULTS ============================================
FUNCTION="${FUNCTION:-${PWD##*/}}"
FNPATH="${FNPATH:-.}"
VERSION="${VERSION:-v0001}"
CONTAINER="${CONTAINER:-sidecar}"
# ======================================= DEFAULTS END ========================================
if [[ "${COMMAND}" == "build" ]]; then
  build
elif [[ "${COMMAND}" == "create" ]]; then
  create
elif [[ "${COMMAND}" == "apply" ]]; then
  apply
elif [[ "${COMMAND}" == "delete" ]]; then
  delete
elif [[ "${COMMAND}" == "list" ]]; then
  list
elif [[ "${COMMAND}" == "logs" ]]; then
  logs
else
  echo "$COMMAND is an invalid command"
  exit 1;
fi
