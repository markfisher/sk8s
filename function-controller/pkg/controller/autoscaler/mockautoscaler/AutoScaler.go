// Code generated by mockery v1.0.0
package mockautoscaler

import autoscaler "github.com/projectriff/riff/function-controller/pkg/controller/autoscaler"
import mock "github.com/stretchr/testify/mock"
import time "time"

// AutoScaler is an autogenerated mock type for the AutoScaler type
type AutoScaler struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *AutoScaler) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InformFunctionReplicas provides a mock function with given fields: function, replicas
func (_m *AutoScaler) InformFunctionReplicas(function autoscaler.FunctionId, replicas int) {
	_m.Called(function, replicas)
}

// Propose provides a mock function with given fields:
func (_m *AutoScaler) Propose() map[autoscaler.FunctionId]int {
	ret := _m.Called()

	var r0 map[autoscaler.FunctionId]int
	if rf, ok := ret.Get(0).(func() map[autoscaler.FunctionId]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[autoscaler.FunctionId]int)
		}
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *AutoScaler) Run() {
	_m.Called()
}

// SetDelayScaleDownPolicy provides a mock function with given fields: _a0
func (_m *AutoScaler) SetDelayScaleDownPolicy(_a0 func(autoscaler.FunctionId) time.Duration) {
	_m.Called(_a0)
}

// SetMaxReplicasPolicy provides a mock function with given fields: _a0
func (_m *AutoScaler) SetMaxReplicasPolicy(_a0 func(autoscaler.FunctionId) int) {
	_m.Called(_a0)
}

// StartMonitoring provides a mock function with given fields: topic, function
func (_m *AutoScaler) StartMonitoring(topic string, function autoscaler.FunctionId) error {
	ret := _m.Called(topic, function)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, autoscaler.FunctionId) error); ok {
		r0 = rf(topic, function)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopMonitoring provides a mock function with given fields: topic, function
func (_m *AutoScaler) StopMonitoring(topic string, function autoscaler.FunctionId) error {
	ret := _m.Called(topic, function)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, autoscaler.FunctionId) error); ok {
		r0 = rf(topic, function)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
