jobs:

- job: unit
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-16.04'
      mac:
        imageName: 'macos-10.13'
      windows:
        imageName: 'windows-2019'
  pool:
    vmImage: $(imageName)
  variables:
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/opt/hostedtoolcache/go/1.12.0/x64' # Go installation path
    GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
    modulePath: '$(build.repository.name)' # Path to the module's code
  steps:
  - template: ci/unit-test-steps.yml
  displayName: 'Unit test'

- job: fats_lite
  dependsOn: unit
  strategy:
    matrix:
      minikube:
        imageName: ubuntu-16.04
        qualifier: minikube
        cluster: minikube
        # TODO restore registry
        # registry: minikube
        registry: docker-daemon
  pool:
    vmImage: $(imageName)
  variables:
    CLUSTER:  '$(cluster)'
    REGISTRY: '$(registry)'
    CLUSTER_NAME: 'riff-$(Build.BuildId)-$(qualifier)'
    NAMESPACE: '$(CLUSTER_NAME)'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  steps:
  - template: ci/downgrade-docker.yml
  - bash: ./ci/fats.sh lite
    displayName: 'Run FATS'
  - bash: ./ci/fats-cleanup.sh
    env:
      TRAVIS_TEST_RESULT: '' # TODO remove this
    condition: always()
    displayName: 'Cleanup FATS'
  displayName: 'FATS lite'

- job: stage
  dependsOn: unit
  pool:
    vmImage: ubuntu-16.04
  variables:
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/opt/hostedtoolcache/go/1.12.0/x64' # Go installation path
    GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
    modulePath: '$(build.repository.name)' # Path to the module's code
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  steps:
  - template: ci/install-go-steps.yml
  - template: ci/install-gcloud.yml
  - bash: ./ci/stage.sh
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
    workingDirectory: '$(modulePath)'
    displayName: 'Stage riff release artifacts'
  displayName: 'Stage'

- job: fats
  dependsOn: stage
  strategy:
    matrix:
      minikube:
        imageName: ubuntu-16.04
        qualifier: minikube
        cluster: minikube
        # TODO restore registry
        # registry: dockerhub
        registry: docker-daemon
      gke:
        imageName: ubuntu-16.04
        qualifier: gke
        cluster: gke
        registry: gcr
      # TODO restore windows tests
      # windows:
      #   imageName: windows-2019
      #   qualifier: windows
      #   cluster: gke
      #   registry: gcr
  pool:
    vmImage: $(imageName)
  variables:
    CLUSTER:  '$(cluster)'
    REGISTRY: '$(registry)'
    CLUSTER_NAME: 'riff-$(Build.BuildId)-$(qualifier)'
    NAMESPACE: '$(CLUSTER_NAME)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  steps:
  - template: ci/downgrade-docker.yml
  - bash: ./ci/fats.sh
    env:
      DOCKER_USERNAME: '$(DockerUsername)'
      DOCKER_PASSWORD: '$(DockerPassword)'
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
    displayName: 'Run FATS'
  - bash: ./ci/fats-cleanup.sh
    env:
      DOCKER_USERNAME: '$(DockerUsername)'
      DOCKER_PASSWORD: '$(DockerPassword)'
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
      TRAVIS_TEST_RESULT: '' # TODO remove this
    condition: always()
    displayName: 'Cleanup FATS'
  displayName: 'FATS'

- job: publish
  dependsOn: fats
  pool:
    vmImage: ubuntu-16.04
  condition: |
    and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        and(
          startsWith(variables['Build.SourceBranch'], 'refs/heads/v'),
          endsWith(variables['Build.SourceBranch'], 'x')
        )
      )
    )
  steps:
  - template: ci/install-gcloud.yml
  - bash: ./ci/publish.sh $(Build.SourceBranchName)
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
    displayName: 'Publish riff release artifacts'
  displayName: 'Publish'
