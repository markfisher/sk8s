/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/projectriff/riff/kubernetes-crds/pkg/apis/projectriff.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InvokerLister helps list Invokers.
type InvokerLister interface {
	// List lists all Invokers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Invoker, err error)
	// Invokers returns an object that can list and get Invokers.
	Invokers(namespace string) InvokerNamespaceLister
	InvokerListerExpansion
}

// invokerLister implements the InvokerLister interface.
type invokerLister struct {
	indexer cache.Indexer
}

// NewInvokerLister returns a new InvokerLister.
func NewInvokerLister(indexer cache.Indexer) InvokerLister {
	return &invokerLister{indexer: indexer}
}

// List lists all Invokers in the indexer.
func (s *invokerLister) List(selector labels.Selector) (ret []*v1alpha1.Invoker, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Invoker))
	})
	return ret, err
}

// Invokers returns an object that can list and get Invokers.
func (s *invokerLister) Invokers(namespace string) InvokerNamespaceLister {
	return invokerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InvokerNamespaceLister helps list and get Invokers.
type InvokerNamespaceLister interface {
	// List lists all Invokers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Invoker, err error)
	// Get retrieves the Invoker from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Invoker, error)
	InvokerNamespaceListerExpansion
}

// invokerNamespaceLister implements the InvokerNamespaceLister
// interface.
type invokerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Invokers in the indexer for a given namespace.
func (s invokerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Invoker, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Invoker))
	})
	return ret, err
}

// Get retrieves the Invoker from the indexer for a given namespace and name.
func (s invokerNamespaceLister) Get(name string) (*v1alpha1.Invoker, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("invoker"), name)
	}
	return obj.(*v1alpha1.Invoker), nil
}
