// Code generated by mockery v1.0.0
package mockdispatcher

import message "github.com/projectriff/riff/message-transport/pkg/message"
import mock "github.com/stretchr/testify/mock"

// Dispatcher is an autogenerated mock type for the Dispatcher type
type Dispatcher struct {
	mock.Mock
	closed chan bool
}

// Input provides a mock function with given fields:
func (_m *Dispatcher) Input() chan<- message.Message {
	ret := _m.Called()

	var r0 chan<- message.Message
	if rf, ok := ret.Get(0).(func() chan<- message.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- message.Message)
		}
	}

	return r0
}

// Output provides a mock function with given fields:
func (_m *Dispatcher) Output() <-chan message.Message {
	ret := _m.Called()

	var r0 <-chan message.Message
	if rf, ok := ret.Get(0).(func() <-chan message.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan message.Message)
		}
	}

	return r0
}

// Closed channel
func (_m *Dispatcher) Closed() <-chan bool {
	ret := _m.Called()

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}
